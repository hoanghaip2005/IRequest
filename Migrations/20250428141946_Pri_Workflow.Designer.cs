// <auto-generated />
using System;
using App.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Request.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250428141946_Pri_Workflow")]
    partial class Pri_Workflow
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("App.Models.IRequest.Department", b =>
                {
                    b.Property<int>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.HasKey("DepartmentID");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("App.Models.IRequest.Priority", b =>
                {
                    b.Property<int>("PriorityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriorityID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PriorityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ResolutionTime")
                        .HasColumnType("int");

                    b.Property<int?>("ResponseTime")
                        .HasColumnType("int");

                    b.HasKey("PriorityID");

                    b.ToTable("Priority", (string)null);
                });

            modelBuilder.Entity("App.Models.IRequest.Request", b =>
                {
                    b.Property<int>("RequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestID"));

                    b.Property<string>("AttachmentURL")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<int?>("PriorityID")
                        .HasColumnType("int");

                    b.Property<int?>("StatusID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("WorkflowID")
                        .HasColumnType("int");

                    b.HasKey("RequestID");

                    b.HasIndex("PriorityID");

                    b.HasIndex("StatusID");

                    b.HasIndex("UsersId");

                    b.HasIndex("WorkflowID");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("App.Models.IRequest.Status", b =>
                {
                    b.Property<int>("StatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFinal")
                        .HasColumnType("bit");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("StatusID");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("App.Models.IRequest.Users", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RolesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("RolesId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("App.Models.IRequest.Workflow", b =>
                {
                    b.Property<int>("WorkflowID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkflowID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("PriorityID")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("WorkflowID");

                    b.HasIndex("PriorityID");

                    b.ToTable("Workflow", (string)null);
                });

            modelBuilder.Entity("App.Models.IRequest.WorkflowStep", b =>
                {
                    b.Property<int>("StepID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StepID"));

                    b.Property<bool>("ApprovalRequired")
                        .HasColumnType("bit");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("StatusID")
                        .HasColumnType("int");

                    b.Property<string>("StepName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StepOrder")
                        .HasColumnType("int");

                    b.Property<int?>("TimeLimitHours")
                        .HasColumnType("int");

                    b.Property<int?>("WorkflowID")
                        .HasColumnType("int");

                    b.HasKey("StepID");

                    b.HasIndex("RoleId");

                    b.HasIndex("StatusID");

                    b.HasIndex("WorkflowID");

                    b.ToTable("WorkflowSteps");
                });

            modelBuilder.Entity("Roles", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("App.Models.IRequest.Request", b =>
                {
                    b.HasOne("App.Models.IRequest.Priority", "Priority")
                        .WithMany("Requests")
                        .HasForeignKey("PriorityID");

                    b.HasOne("App.Models.IRequest.Status", "Status")
                        .WithMany("Requests")
                        .HasForeignKey("StatusID");

                    b.HasOne("App.Models.IRequest.Users", null)
                        .WithMany("Requests")
                        .HasForeignKey("UsersId");

                    b.HasOne("App.Models.IRequest.Workflow", "Workflow")
                        .WithMany("Requests")
                        .HasForeignKey("WorkflowID");

                    b.Navigation("Priority");

                    b.Navigation("Status");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("App.Models.IRequest.Users", b =>
                {
                    b.HasOne("App.Models.IRequest.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentID");

                    b.HasOne("Roles", null)
                        .WithMany("Users")
                        .HasForeignKey("RolesId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("App.Models.IRequest.Workflow", b =>
                {
                    b.HasOne("App.Models.IRequest.Priority", "Priority")
                        .WithMany("Workflows")
                        .HasForeignKey("PriorityID");

                    b.Navigation("Priority");
                });

            modelBuilder.Entity("App.Models.IRequest.WorkflowStep", b =>
                {
                    b.HasOne("Roles", "Role")
                        .WithMany("WorkflowSteps")
                        .HasForeignKey("RoleId");

                    b.HasOne("App.Models.IRequest.Status", "statsus")
                        .WithMany("WorkflowSteps")
                        .HasForeignKey("StatusID");

                    b.HasOne("App.Models.IRequest.Workflow", "Workflow")
                        .WithMany("Steps")
                        .HasForeignKey("WorkflowID");

                    b.Navigation("Role");

                    b.Navigation("Workflow");

                    b.Navigation("statsus");
                });

            modelBuilder.Entity("App.Models.IRequest.Department", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("App.Models.IRequest.Priority", b =>
                {
                    b.Navigation("Requests");

                    b.Navigation("Workflows");
                });

            modelBuilder.Entity("App.Models.IRequest.Status", b =>
                {
                    b.Navigation("Requests");

                    b.Navigation("WorkflowSteps");
                });

            modelBuilder.Entity("App.Models.IRequest.Users", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("App.Models.IRequest.Workflow", b =>
                {
                    b.Navigation("Requests");

                    b.Navigation("Steps");
                });

            modelBuilder.Entity("Roles", b =>
                {
                    b.Navigation("Users");

                    b.Navigation("WorkflowSteps");
                });
#pragma warning restore 612, 618
        }
    }
}
